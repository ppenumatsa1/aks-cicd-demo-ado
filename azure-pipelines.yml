# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service


trigger:
- main


resources:
- repo: self

variables:

  imageName: 'myapp'  
  containerRegistryDev: 'sc-acrdev51693164'
  containerRegistryStage: 'sc-acrstage51693164'
  containerRegistryProd: 'sc-acrprod51693164'
  dockerfilePath: '**/Dockerfile'

  acrdevurl: 'acrdev51693164.azurecr.io'
  acrstageurl: 'acrstage51693164.azurecr.io'
  acrprodurl: 'acrprod51693164.azurecr.io'

  imagePullSecretDev: 'acrdev51693164dev-auth'
  imagePullSecretStage: 'acrstage51693164stage-auth'
  imagePullSecretProd: 'acrprod51693164prod-auth'
 

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: CI
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool: 
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build Container Image
      inputs:
        command: build
        repository: $(imageName)
        dockerfile: $(dockerfilePath)
        tags: $(Build.BuildId)

    - task: Docker@2
      displayName: Save Image in CI
      inputs:
        repository: $(imageName)
        command: save
        arguments: '--output $(Pipeline.Workspace)/$(ImageName).image.tar $(ImageName):$(Build.BuildId)'
        addPipelineData: false


    - task: PublishPipelineArtifact@1
      displayName: Publish Image Artifact
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'ContainerImage'
        publishLocation: 'pipeline'
      


- stage: CDDEV
  displayName: CD for Dev Env
  dependsOn: CI

  jobs:
  - deployment: Deploy
    displayName: Deploy to Dev Environment
    variables:
    - name: acr-url
      value: $(acrdevurl)
    - name: image-name
      value: $(imageName)
    pool: 
      vmImage: $(vmImageName)
    environment: 'env-aks-dev-51693164.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Docker@2
            displayName: Load Image from CI
            inputs:
              command: load
              arguments: '--input $(Pipeline.Workspace)/ContainerImage/$(imageName).image.tar'
            
          - task: Docker@2
            displayName: ReTag Image with ACR Name - BuildId
            inputs:
              containerRegistry: '$(containerRegistryDev)'
              repository: '$(imageName)'
              command: tag
              arguments: '$(imageName):$(Build.BuildId)  $(acrdevurl)/$(imageName):$(Build.BuildId)'


          - task: Docker@2
            displayName: Push Image to Dev ACR
            inputs:
              containerRegistry: $(containerRegistryDev)
              repository: $(imageName)
              command: push
              tags: $(Build.BuildId)
          
          - task: replacetokens@5
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/ContainerImage/s/manifests'
              targetFiles: 'deployment.yml'
              tokenPattern: 'custom'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: __
              tokenSuffix: __
              actionOnNoFiles: 'continue'
              enableTelemetry: true

          - task: KubernetesManifest@0
            inputs:
              action: createSecret
              kubernetesServiceConnection: 'env-aks-dev-51693164-aks-dev-51693164-default-1680032481714'
              namespace: default
              secretType: dockerRegistry
              secretName: $(imagePullSecretDev)
              dockerRegistryEndpoint: $(containerRegistryDev)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              #kubernetesServiceConnection: 'env-aks-dev-51693164-aks-dev-51693164-default-1680032481714'
              #namespace: default
              manifests: |
                $(Pipeline.Workspace)/ContainerImage/s/manifests/deployment.yml
                $(Pipeline.Workspace)/ContainerImage/s/manifests/service.yml
              imagePullSecrets: 
                $(imagePullSecretDev)
              containers: |
                $(acrdevurl)/$(imageName):$(Build.BuildId)
            



- stage: CDStage
  displayName: CD for Stage Env
  

  jobs:
  - deployment: DeployStage
    displayName: Deploy to Stage Environment
    variables:
    - name: acr-url
      value: $(acrstageurl)
    - name: image-name
      value: $(imageName)
    pool: 
      vmImage: $(vmImageName)
    environment: 'env-aks-staging-51693164.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Docker@2
            displayName: Load Image from CI
            inputs:
              command: load
              arguments: '--input $(Pipeline.Workspace)/ContainerImage/$(imageName).image.tar'
            
          - task: Docker@2
            displayName: ReTag Image with ACR Name - BuildId
            inputs:
              containerRegistry: $(containerRegistryStage)
              repository: $(imageName)
              command: tag
              arguments: '$(imageName):$(Build.BuildId)  $(acrstageurl)/$(imageName):$(Build.BuildId)'


          - task: Docker@2
            displayName: Push Image to Stage ACR
            inputs:
              containerRegistry: $(containerRegistryStage)
              repository: $(imageName)
              command: push
              tags: $(Build.BuildId)
            
          - task: replacetokens@5
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/ContainerImage/s/manifests'
              targetFiles: 'deployment.yml'
              tokenPattern: 'custom'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: __
              tokenSuffix: __
              actionOnNoFiles: 'continue'
              enableTelemetry: true
            
          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              #kubernetesServiceConnection: 'aks-staging-686542000-aks-staging-686542000-default-1679961179082'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: $(imagePullSecretStage)
              dockerRegistryEndpoint: $(containerRegistryStage)
          
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              #kubernetesServiceConnection: 'aks-staging-686542000-aks-staging-686542000-default-1679961179082'
              #namespace: default
              manifests: |
                $(Pipeline.Workspace)/ContainerImage/s/manifests/deployment.yml
                $(Pipeline.Workspace)/ContainerImage/s/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecretStage)
              containers: |
                $(acrstageurl)/$(imageName):$(Build.BuildId)
              

- stage: CDProd
  displayName: CD for Prod Env
  

  jobs:
  - deployment: DeployProd
    displayName: Deploy to Prod Environment
    variables:
    - name: acr-url
      value: $(acrprodurl)
    - name: image-name
      value: $(imageName)
    pool: 
      vmImage: $(vmImageName)
    environment: 'env-aks-prod-51693164.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Docker@2
            displayName: Load Image from CI
            inputs:
              command: load
              arguments: '--input $(Pipeline.Workspace)/ContainerImage/$(imageName).image.tar'
            
          - task: Docker@2
            displayName: ReTag Image with ACR Name - BuildId
            inputs:
              containerRegistry: $(containerRegistryProd)
              repository: $(imageName)
              command: tag
              arguments: '$(imageName):$(Build.BuildId)  $(acrprodurl)/$(imageName):$(Build.BuildId)'


          - task: Docker@2
            displayName: Push Image to Stage ACR
            inputs:
              containerRegistry: $(containerRegistryProd)
              repository: $(imageName)
              command: push
              tags: $(Build.BuildId)
          
          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              #kubernetesServiceConnection: 'aks-staging-686542000-aks-staging-686542000-default-1679961179082'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: $(imagePullSecretProd)
              dockerRegistryEndpoint: $(containerRegistryProd)

          - task: replacetokens@5
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/ContainerImage/s/manifests'
              targetFiles: 'deployment.yml'
              tokenPattern: 'custom'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: __
              tokenSuffix: __
              actionOnNoFiles: 'continue'
              enableTelemetry: true


          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              #kubernetesServiceConnection: 'aks-prod-686542000-aks-prod-686542000-default-1679961212916'
              #namespace: default
              manifests: |
                $(Pipeline.Workspace)/ContainerImage/s/manifests/deployment.yml
                $(Pipeline.Workspace)/ContainerImage/s/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecretProd)
              containers: |
                $(acrprodurl)/$(imageName):$(Build.BuildId)
